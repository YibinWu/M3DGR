%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 1  

imu_topic: "/camera/imu"
image_topic: "/camera/color/image_raw"
encoder_topic: "/odom"
output_path: "~/output/"

model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0.0
   k2: 0.0
   p1: 0.0
   p2: 0.0
projection_parameters:
  fx: 607.79772949218
  fy: 607.83526613281
  cx: 328.79772949218
  cy: 245.53321838378


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation_ic: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.99957087 , 0.00215313 , 0.02921355 , 
          -0.00192891  ,0.99996848, -0.00770122 ,
          -0.02922921 , 0.00764156  ,0.99954353 ]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation_ic: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.03668114, -0.00477653, 0.0316039]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 200            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.15  # max solver itration time (ms), to guarantee real time
max_num_iterations: 15   # max solver itrations, to guarantee real time
keyframe_parallax: 5  # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 1.2374091609523514e-02          # accelerometer measurement noise standard deviation. 
gyr_n: 3.0032654435730201e-03         # gyroscope measurement noise standard deviation.     
acc_w: 1.9218003442176448e-04        # accelerometer bias random work noise standard deviation.  
gyr_w: 5.4692100664858005e-05       # gyroscope bias random work noise standard deviation.     
g_norm: 9.805     # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1             # useful in real-time and large project
pose_graph_save_path: "/home/xiaoqiang/output/pose_graph/" # save and load path

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ

#wheel encoder
is_encoder: 1 # is encoder
encode_resolution: 4096         # resolution of encoder
left_wheel_diameter: 0.623479   # [m]
right_wheel_diameter: 0.622806  # [m]
wheelbase: 1.52439             # [m] wheelbase, length between two wheels
enc_n: 0.2       # encoder readings noise standard deviation.

#Rotation from encoder frame to imu frame, imu^R_enc
extrinsicRotation_io: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 4.2873564019253907e-02, -9.9906999607154057e-01, 4.5826256555663858e-03, 
          2.3548883729155812e-02, -3.5750257528033291e-03,-9.9971629438855181e-01, 
          9.9880293731215963e-01, 4.2969316267296165e-02, 2.3373709079293481e-02 ]
#Translation from encoder frame to imu frame, imu^T_enc
extrinsicTranslation_io: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [1.0000278019634017e-00, 0.0477569625897234e-01, 2.0902387796334685e-01 ]   # [0.07, 0., -1.7]
